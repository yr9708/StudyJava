<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
<aop:aspectj-autoproxy/>

<bean id="man" class="com.test03.Man"/>
<bean id="woman" class="com.test03.Woman"/>
<bean id="myAspect" class="com.test03.MyAspect"/>

<aop:config>
	<aop:aspect ref="myAspect">
		<aop:before method="before" pointcut="execution(public * com.test03.Woman.classWork(..))"/>
		<aop:after method="after" pointcut="execution(public * com.test03.Man.classWork(..))"/>
	</aop:aspect>
</aop:config>

<!--
	타겟을 호출하기 전에 before 메서드 실행
	타겟을 호출한 후에 after 메서드 실행
	
	조인포인트 중에서 public 으로 시작하는 것 (리턴타입, 이름상관없고, 파라미터가 0 또는 그 이상)
	public void classWork() 가 조건에 부합하기 때문에 비포,에프터가 실행이 된것
	
	포인트컷은 ccc가 cc를 만나 proxy가 되어 언제 리턴이 될건지를 알려주는 것
	(포인트컷이 호출 될때 proxy가 되어 리턴이된다.)
	
	ccc를 붙일 수 있는 모든 부분이 조인 포인트 이다.
	조인포인트가 엄청 많은데 그중에 어디에 붙여줄지 지정해주는게 포인트 컷
	ccc와 cc를 advice(나누어진 것) 라고 합니다.
	Advisor (advice와 point cut 을 합친것)
	
	
 -->
</beans>


